# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import cv2
from SecondWindow import Ui_SecondWindow
import datetime
import serial
from multiprocessing import Process
from PyQt5.QtCore import QTimer
import os


F = 0
string = 1234
LISTS = []
FlagID =""

def loop_a():
    now = datetime.datetime.now()
    ser = serial.Serial('COM6', baudrate=115200, timeout=2)  # настройка порта
    number = 0
    spisok = []
    line = ""
    while 1:
        number = number + 1

        arduinoData = ser.readline().decode('ascii')
        data = arduinoData.replace('\n', '').replace('\r','')

        #print(line)
        #print("close")
        #if (data != ''):
        #    global FlagID
        #    FlagID = data
        if (data !=''):
            date = now.strftime("%d-%m-%Y")
            time = now.strftime("%H:%M")
            line = str(data) + "\t" + str(date)+ "\t" + str(time) + " "
            video = open("video.txt", 'w')
            if (line.find("D3C1F9")!= False):
                video.write("D3C1F9")
            elif (line.find("987177")!= False):
                video.write("987177")
            video.close()
            #spisok.append(data)
            potokFile = open("potok.txt", 'w')
            potokFile.write(str(line))
            potokFile.close()
            spisok = []





def a():
    while 1:
        print("a")
def loop_b():
    while 1:
        print("b")
        #print(LISTS)

def mainFunc():
    while 1:
        #LISTS.append(FlagID)
        #print(FlagID)
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = Ui_MainWindow()
        ui.setupUi(MainWindow)
        #ui.listWidget.addItems(LISTS)
        MainWindow.show()
        sys.exit(app.exec_())

#


class Ui_MainWindow(object):


    #print(str)
    def openWindow(self):
        self.SecondWindow = QtWidgets.QMainWindow()
        self.ui = Ui_SecondWindow()
        self.ui.setupUi(self.SecondWindow)
        self.SecondWindow.show()

    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1329, 861)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 10, 951, 781))
        self.label.setObjectName("label")

        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(970, 0, 361, 831))
        self.listWidget.setObjectName("listWidget")

        self.listWidget.itemClicked.connect(self.selectionChanged)

        MainWindow.setCentralWidget(self.centralwidget)

        self.Worker1 = Worker1()

        self.Worker1.start()
        self.Worker1.ImageUpdate.connect(self.ImageUpdateSlot)

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.timer = QTimer()
        self.timer.timeout.connect(self.dynamicListWidget)
        self.timer.start(2000)



        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "TextLabel"))

    def selectionChanged(self, item):
        text  = ""
        now = datetime.datetime.now()
        #print("Вы кликнули: {}".format(item.text()))
        text = format(item.text())

       # print(text.find("D3C1F9"))
        if (text.find("D3C1F9")==0):
            self.file = open('DB.txt', 'w')
            date = now.strftime("%d-%m-%Y")
            time = now.strftime("%H:%M")
            #print(date)
            self.file.write("Дата: " + str(date) + '\n')
            self.file.write("Время: " + str(time) + '\n')
            self.file.write("ID: D3C1F9" + '\n')
            self.file.write("ФИО: Иванов Иван Иванович" + '\n')
            self.file.write("Подразделение: Разработка ПО" + '\n')
            self.file.write("./img/1.jpg" + '\n')
            self.file.close()
            self.openWindow()
        if (text.find("987177") == 0):
            #global F
            F = 2
            self.file = open('DB.txt', 'w')
            date = now.strftime("%d-%m-%Y")
            time = now.strftime("%H:%M")
            #print(date)
            self.file.write("Дата: " + str(date) + '\n')
            self.file.write("Время: " + str(time) + '\n')
            self.file.write("ID: 987177" + '\n')
            self.file.write("ФИО: Петров Петр Петрович" + '\n')
            self.file.write("Подразделение: Тестирование ПО" + '\n')
            self.file.write("./img/2.jpg" + '\n')
            self.file.close()
            self.openWindow()
        #if item.text() == "item2":

        #if item.text() == "item1":

        #if item.text() == "item3":



            #print("Делайте что-нибудь.")
            # self.listWidget.setGeometry(QRect(0, 0, 200000, 29999));

    def ImageUpdateSlot(self, Image):
        self.label.setPixmap(QPixmap.fromImage(Image))

    def CancelFeed(self):
        global listUI
        #while 1:

    def dynamicListWidget(self):
        if (os.path.exists("potok.txt")):
            openFile = open("potok.txt", 'r+')
            # if(openFile.readline() != ''):
            listUI = openFile.readline().replace("'", '').replace('[', '').replace(']', '').replace(',', '').split(' ')
            if (listUI != ''):
                self.listWidget.addItems(listUI)

            listUI = []
            openFile.close()
            os.remove("potok.txt")




class Worker1(QThread):
        ImageUpdate = pyqtSignal(QImage)
        global flag
        flag = "none"

        def read_file(self):
            if (os.path.exists("video.txt")):
                openFile = open("video.txt", 'r+')
                flag=str(openFile.readline())
                openFile.close()
                os.remove("video.txt")
                return flag
            else:
                return"not finde"



        def run(self):
            self.ThreadActive = True
            Capture = cv2.VideoCapture(0)
            while self.ThreadActive:
                ret, frame = Capture.read()

                res = self.read_file()

                if (res.find("D3C1F9") != -1):
                    cv2.imwrite('./img/1.jpg', frame)
                    print(flag)
                elif (res.find("987177") !=-1):cv2.imwrite('./img/2.jpg', frame)
                elif (res.find("None") !=-1): print("3")
                if ret:
                    Image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

                    FlippedImage = cv2.flip(Image, 1)
                    ConvertToQtFormat = QImage(FlippedImage.data, FlippedImage.shape[1], FlippedImage.shape[0],
                                               QImage.Format_RGB888)
                    Pic = ConvertToQtFormat.scaled(900, 900, Qt.KeepAspectRatio)
                    self.ImageUpdate.emit(Pic)


        def stop(self):
            self.ThreadActive = False
            self.quit()

if __name__ == "__main__":
    import sys
    #Process(target=loop_a).start()
    Process(target=a).start()
    Process(target=loop_b).start()
    #Process(target=mainFunc).start()
